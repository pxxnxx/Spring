<영속성 컨텍스트 1>
    영속성 컨텍스트 == 엔티티를 영구 저장하는 환경
    엔티티 매니저를 통해 영속성 컨텍스트에 접근

    비영속 - 영속성 컨텍스트와 상관없는 새로운 상태
    영속 - 영속성 컨텍스트에 관리되는 상태 (Transaction commit -> Query)
    준영속 - 영속성 컨텍스트에 저장되었다가 분리된 상태
    삭제 - 삭제된 상태

<영속성 컨텍스트 2>
    1차 캐시 - 영속시 PK <-> Entity 매핑하여 1차 캐시에 저장 (한 Transaction이라 큰 영향 X)
    동일성 보장 - 1차 캐시를 통해 같은 Transaction에서 Entity끼리 동일성 보장
    쓰기 지연 - 1차 캐시를 통해 바로 SQL 처리하지 않고 Commit시 처리 가능
    변경 감지 - Flush -> 스냅샷 비교 -> Update SQL -> Flush -> Commit
    지연 로딩

    JPA에는 동적 객체 생성때문에 기본 생성자 필요

<플러시>
    영속성 컨텍스트의 변경 내용을 데이터베이스에 동기화
    변경 감지 -> SQL 저장소에 등록 -> Commit시 처리
    기본적으로 자동 호출이며(JPQL 실행시에도 호출) em.flush() 통해 직접 호출 가능
    1차 캐시 유지됨

<준영속 상태>
    영속성 컨텍스트에서 분리, 업데이트 되지 않음

<객체와 테이블 매핑>
    객체와 테이블 매핑 : @Entity, @Table
    @Entity는 JPA가 관리. 기본 생성자 필수, final 사용 X
    기본값은 클래스 이름. 변경 필요 시 name 이용

<데이터베이스 스키마 자동 생성>
    DDL을 애플리케이션 실행 시점에서 자동 생성. DB Table을 생성해줌
    데이터베이스 방언을 활용해서 데이터베이스에 맞는 적절한 DDL 생성
    방언 별로 변경 됨
    개발에서만 사용 해야함 // 그래도 가급적으로 사용 X
    초기에는 create, update
    테스트 서버 update, validate
    스테이징과 운영 서버 validate, none

    create - 기존 테이블 존재시 삭제후 생성
    create-drop - 종료시점에 삭제
    update - 변경분만 적용 // 지우는 것은 안됨
    validate - 엔티티와 테이블 정상 매핑되었는지만 확인
    none - 없음

    @Column(unique = true, length = 10) 이런식으로 조건 줄 수 있음
    JPA 실행 로직에 영향 주지 않아 사용해도 괜찮음

<필드와 컬럼 매핑>
    @Column - 컬럼 매핑
        nullable = false <- null값 허용 X
        unique는 주로 @Table에서 이용
    @Temporal - 날짜 타입 매핑
        TemporalType 3개 있음 매핑 필요
        LocalDate, LocalDateTime 이용 시 @Temporal 매핑 필요 X
    @Enumerated - Enum 타입 매핑
        Ordinal - Enum 순서를 데이터베이스에 저장
        String - Enum 이름을 데이터베이스에 저장
        기본 - Ordinal, 순서가 바뀔 수 있으니 String 사용 필수
    @Lob - BLOB, CLOB 매핑
        Varchar 넘어서는 컨텐츠 넣고 싶으면 이용 // 문자열일경우 Clob
    @Transient - 특정 필드를 컬럼에 매핑하지 않음

<기본 키 매핑>
    직접 할당 : @Id만 사용
    자동 생성 : @GeneratedValue
        Identity, Sequence, Table, Auto
        Identity <- DB에 들어가야 Id값 알 수 있음. 그래서 Persist할 때 Query (큰 문제는 X)
        Sequence <- Sequence만 받아와서 바로 Query X
        Table <-

        allocationSize 이용하면 DB에 미리 올려놓아서 네트워크 연결 여러번 안해도 됨
            - Sequence, Table에서 이용. 동시성 문제 X
    기본 키 제약 조건 : null 아님, 유일, 변하면 안됨.
        만족하는 자연키 찾기 어려움 -> 대체키 사용
    권장 : Long형 + 대체키 + 키 생성전략 사용

<요구사항 분석과 기본 매핑>
    회원 - 주문 : 일대다
    주문 - 상품 : 다대다
    -> 주문 상품 만들어 일대다 다대일로 만듦
    데이터 중심 설계의 문제점
        - 테이블의 외래키를 객체에 그대로 가져옴
        - 객체 그래프 탐색이 불가능
        - 참조가 없으므로 UML도 잘못됨

<단방향 연관관계>
    select * from member m join team t on m.team_id = t.team_id;
    객체를 테이블에 맞추어 데이터 중심으로 모델링하면 협력 관계를 만들 수 없음.
    단방향 연관관계
    member 입장에서 Many라서 @ManyToOne, @JoinColumn 이용하면 매핑 가능

*중요함*
<양방향 연관관계와 연관관계의 주인 1 - 기본>
    양방향 객체 연관관계로 바꾸어도 테이블 연관관계는 차이 X
    team 입장에서는 One이라서 @OneToMany, mappedBy로 매핑된 요소 지정
    flush, clear해야 값이 나옴 <- 이유 : 1차 캐시에는 컬렉션 값이 없음
    객체는 단방향 매핑이 신경쓸 것이 많이 없음

    *mappedBy 중요*
    객체 테이블 양방향 관계 차이점
        객체 연관관계 == 2개
            회원 -> 팀 (단방향)
            팀 -> 회원 (단방향)
        테이블 연관관계 == 1개
            회원 <-> 팀 (양방향) // Key 하나로 둘다 확인 가능. 방향 없다고 봐도 됨
    => 둘중 하나로 외래 키 관리해야 함.

    => *Owner*
    주인만이 외래 키를 관리
    주인은 mappedBy 속성 사용 X
    외래 키가 있는 곳을 주인으로 정해야 함. (N:1 의 N)

<양방향 연관관계와 연관관계의 주인 2 - 주의점, 정리>
    member가 owner이기 때문에
    team.getMembers().add(member) X
    member.setTeam(team) O
    순수 객체 상태 고려해서 둘다 입력하는 것을 권장
        -> flush, clear 없어도 값이 나옴 (1차 캐시에 컬렉션 저장)
    연관관계 편의 메소드 생성 권장
        -> setTeam에 team.getMembers().add(this) 추가
    setTeam 대신 addMember 이용해도 되지만 둘 중 하나만 이용할 것
    양방향 매핑시 무한 루프 ex) toString, lombok, JSON 생성 라이브러리
    Entity는 Controller로 반환 X

    정리
        단방향 매핑만으로도 이미 연관관계 매핑은 완료
        양방향 매핑은 반대 방향으로 조회 기능이 추가된 것 뿐
        JPQL에서 역방향으로 탐색할 일이 많음
        단방향 매핑을 잘 하고 양방향은 필요할 때 추가해도 됨

<연관관계 매핑 시작>
    Member에 Orders List를 넣어두는 것은 좋지 않은 설계

<정리>
    연관관계 매핑시 고려사항
        - 다중성
        - 단방향, 양방향
        - 연관관계의 주인

    다중성
        - 다대일 @ManyToOne *
        - 일대다 @OneToMany *
        - 일대일 @OneToOne
        - 다대다 @ManyToMany <- 쓰면 안됨

    단방향, 양방향
        - 테이블
            외래 키 하나로 양쪽 조인 가능
            사실 방향이라는 개념이 없음
        - 객체
            참조용 필드가 있는 쪽을뫈 참조 가능
            한쪽만 참조하면 단방향
            양쪽이 서로 참조하면 양방향 (단방향 두개)
    연관관계의 주인
        테이블은 외래 키 하나로 두 테이블이 연관관계를 맺음
        객체 양방향 관계는 A->B, B->A 처럼 참조가 2군데
            -> 외래키 관리할 곳 지정해야 함
        연관관계의 주인 : 외래 키를 관리하는 참조
        주인의 반대편 : 외래 키에 영향을 주지 않음, 단순 조회만

<다대일 [N:1]>
    가장 많이 사용하는 연관관계
    다대일의 반대는 일대다

<일대다 [1:N]>
    일에서 외래키 관리(연관관계의 주인)
    team에서 @JoinColumn(name = "TEAM_ID") members로 연관관계 지정 가능
    team.members에 add(member)하면 member를 업데이트 함
    큰 손해는 아니나 성능상 손해 O
    실무에서는 잘 이용 X
        -> Team만 건든 것 같은데 Member도 Update. 혼란 여지 큼

    정리
        - 다쪽에 외래키 존재
        - 일대다 단방향은 @JoinColumn 필수
        - 객체와 테이블의 차이 때문에 반대편 테이블의 외래 키를 관리하는 특이한 구조
    단점
        - 엔티티가 관리하는 외래 키가 다른 테이블에 있음
        - 연관관계 관리를 위해 추가로 UPDATE SQL 실행

    => 일대다 단방향 매핑보다는 다대일 양방향 매핑 사용 권장

    일대다 양방향 비공식적으로 가능은 하나 쓰지 말자.
    @ManyToOne
    @JoinCoulmn(name = "TEAM_ID", insertable = false, updatable = false)
    private Team team;
    읽기 전용으로 사용

<일대일 [1:1]>
    일대일 관계의 반대는 일대일
    주 테이블이나 대상 테이블 중 외래 키 선택 가능
    외래 키에 데이터베이스 유니크 제약조건 추가
    다대일 단방향 매핑과 유사
    @JoinColumn 이용, 반대쪽에는 MappedBy 이용
    다대일 양방향 매핑 처럼 외래 키가 있는 곳이 연관관계의 주인

    대상 테이블에 외래 키 단방향 => 불가능
    대상 테이블에 외래 키 양방향 => 주 테이블 외래키 양방향과 같음 (반대 상황)

    일대일 대상에서 외래 키 주인 Member? Locker?
    DB 입장
        - Member가 여러 Lcoker 가질 수 있게 되면 많이 고쳐야 함. (물론 Locker도 반대로 가능)
    개발자 입장
        - Member에 Locker 있는게 훨씬 유리
        - Locker가 있으면 함수 실행 없으면 실행 X 가능

    정리
        주 테이블에 외래 키
            - 주 객체가 대상 객체의 참조를 가지는 것 처럼 주 테이블에 외래 키를 두고 대상 테이블 찾음
            - 객체지향 개발자 선호
            - JPA 매핑 편리
            - 장점 : 주 테이블만 조회해도 대상 테이블에 데이터가 있는지 확인 가능
            - 단점 : 값이 없으면 외래 키에 null 허용

        대상 테이블에 외래 키
            - 대상 테이블에 외래 키가 존재
            - 전통적인 데이터베이스 개발자 선호
            - 장점 : 주 테이블과 대상 테이블을 일대일에서 일대다 관계로 변경할 때 테이블 구조 유지
            - 단점 : 양방향으로 만들어야 함
                    프록시 기능의 한계로 지연 로딩으로 설정해도 항상 즉시 로딩됨
                    (Member의 Locker 조회하면 Member Table만으로 확인 불가능)
        *충분한 협의 필요*

<다대다 [N:M]>
    사용 X
    관계형 데이터베이스는 정규화된 테이블 2개로 다대다 관계를 표현할 수 없음
    연결 테이블을 추가해서 일대다, 다대일 관계로 풀어내야 함
    객체는 컬렉션을 사용해서 객체 2개로 다대다 관계 가능

    연결 테이블이 단순히 연결만 하고 끝나지 않음
    주문시간, 수량 같은 데이터가 들어올 수 있음

    PK는 의미없는 값으로 사용하는 것이 좋음
    ex) MemberProduct의 PK -> Member_ID + Product_ID <- 사용 X

<실전 예제 3 - 다양한 연관관계 매핑>
    parent - child로 Self Mapping 가능

<상속관계 매핑>
    관계형 데이터베이스에는 상속 관계 X
    슈퍼타입 서브타입 관계라는 모델링 기법이 객체 상속과 유사
    상속관계 매핑 : 객체의 상속과 구조와 DB의 슈퍼타입 서브타입 관계를 매핑

    JPA 사용하면 조인 전략 <-> 단일 테이블 전략 변경 용이

    조인 전략 <- JPA와 가장 유사
        @Inheritance strategy JOINED 사용
        @DiscriminatorColumn 사용하면 Dtype 저장
        @DiscriminatorValue 사용하면 Dtype 이름 변경 가능
        장점
            - 테이블 정규화
            - 외래 키 참조 무결성 제약조건 활용 가능
            - 저장 공간 효율화
        단점
            - 조회시 조인을 많이 사용, 성능 저하 (큰 문제 아님)
            - 조회 쿼리가 복잡함
            - 데이터 저장시 Insert SQL 두번

    단일 테이블 전략
        @Inheritance strategy SINGLE_TABLE 사용
        Query 한번만 나감
        장점
            - 조인 필요 없어 조회 성능이 빠름
            - 조회 쿼리가 단순함
        단점
            - 자식 엔티티가 매핑한 컬럼은 모두 null 허용 ex) album의 isbn
            - 단일 테이블에 모든 것을 저장하므로 테이블이 커질 수 있어 느려질 수 있음 (거의 없음)

    구현 클래스마다 테이블 전략
        Item Class 없앰
        abstract class로 생성 후 @Inheritance strategy TABLE_PER_CLASS 사용
        @DiscriminatorColumn 의미 X
        Item 통해서 하위 테이블 find 할 때 모든 하위 테이블 다 조회해야 함
        사용하는 것을 권장하지 않음
        장점
            - 서브 타입을 명확하게 구분해서 처리할 때 효과적
            - not null 제약조건 사용 가능
        단점
            - 여러 자식 테이블을 함께 조회할 때 성능이 느림 (UNION SQL)
            - 자식 테이블을 통합해서 쿼리하기 어려움
            - 추가할 때 처리 할 내용이 많음

<Mapped Superclass - 매핑 정보 상속>
    공동 매핑 정보가 필요할 때 사용(id, name -> BaseEntity)

    상속관계 매핑 X
    엔티티 X, 테이블과 매핑 X
    매핑 정보만 제공
    조회, 검색 불가 (em.find(BaseEntity) 불가)
    직접 생성해서 사용할 일이 없으므로 추상 클래스 권장
    테이블과 관계 없고 단순 매핑 정보를 모으는 역할

    참고 : @Entity Class는 @Entity나 @MappedSuperclass로 지정한 클래스만 상속 가능

<프록시>
    Member 조회할 때 Team도 조회해야 하나?
    Member, Team 다 필요한 경우 || Member만 필요한 경우

    em.find() : 데이터베이스를 통해서 실제 엔티티 객체 조회
    em.getReference() : 데이터베이스 조회를 미루는 가짜(프록시) 객체 조회

    실제 클래스를 상속 받아서 만들어짐 -> 실제 클래스와 겉모양이 같음
    사용하는 입장에서는 진짜 객체인지 프록시 객체인지 구분하지 않고 사용하면 됨 (이론상)

    프록시 객체는 실제 객체의 참조(target)를 보관
    프록시 객체에 없는 경우 영속성 컨텍스트에 초기화 요청하여 DB조회 후 실제 Entity 생성

    프록시 객체는 처음 사용할 때 한 번만 초기화
    초기화 할 때 객체가 실제 엔티티로 바뀌는건 아님
    프록시 객체는 원본 엔티티를 상속받음, 따라서 타입 체크시 주의해야 함 (== 비교 실패, 대신 instanceof 사용)
    영속성 컨텍스트에 찾는 엔티티가 이미 있으면 m.getReference 해도 실제 엔티티 반환
        반대로 getReference 이후 find 하면 find도 Proxy return함
    영속성 컨텍스트의 도움을 받을 수 없는 준영속 상태일 때, 프록시를 초기화하면 문제 발생
        em.getReference -> em.detach(close, clear) -> em.getReference 객체 이용 => 오류
        org.hibernate.LazyinitializationException 예외 발생
        em.find는 문제 X

<체크 할만한 실수들>
    - @Entity 안붙이는 실수 주의
    - DB Table이 꼬이는 경우 오류 <- 버전 문제였다 왜 1.4.200이 되어있지
